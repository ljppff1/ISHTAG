package com.example.fragment;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import com.example.ishtag.R;import HaoRan.ImageFilter.AutoAdjustFilter;import HaoRan.ImageFilter.BannerFilter;import HaoRan.ImageFilter.BigBrotherFilter;import HaoRan.ImageFilter.BlackWhiteFilter;import HaoRan.ImageFilter.BlindFilter;import HaoRan.ImageFilter.BlockPrintFilter;import HaoRan.ImageFilter.BrickFilter;import HaoRan.ImageFilter.BrightContrastFilter;import HaoRan.ImageFilter.CleanGlassFilter;import HaoRan.ImageFilter.ColorQuantizeFilter;import HaoRan.ImageFilter.ColorToneFilter;import HaoRan.ImageFilter.ComicFilter;import HaoRan.ImageFilter.EdgeFilter;import HaoRan.ImageFilter.FeatherFilter;import HaoRan.ImageFilter.FillPatternFilter;import HaoRan.ImageFilter.FilmFilter;import HaoRan.ImageFilter.FocusFilter;import HaoRan.ImageFilter.GammaFilter;import HaoRan.ImageFilter.GaussianBlurFilter;import HaoRan.ImageFilter.Gradient;import HaoRan.ImageFilter.HslModifyFilter;import HaoRan.ImageFilter.IImageFilter;import HaoRan.ImageFilter.IllusionFilter;import HaoRan.ImageFilter.Image;import HaoRan.ImageFilter.InvertFilter;import HaoRan.ImageFilter.LensFlareFilter;import HaoRan.ImageFilter.LightFilter;import HaoRan.ImageFilter.LomoFilter;import HaoRan.ImageFilter.MirrorFilter;import HaoRan.ImageFilter.MistFilter;import HaoRan.ImageFilter.MonitorFilter;import HaoRan.ImageFilter.MosaicFilter;import HaoRan.ImageFilter.NeonFilter;import HaoRan.ImageFilter.NightVisionFilter;import HaoRan.ImageFilter.NoiseFilter;import HaoRan.ImageFilter.OilPaintFilter;import HaoRan.ImageFilter.OldPhotoFilter;import HaoRan.ImageFilter.PaintBorderFilter;import HaoRan.ImageFilter.PixelateFilter;import HaoRan.ImageFilter.PosterizeFilter;import HaoRan.ImageFilter.RadialDistortionFilter;import HaoRan.ImageFilter.RainBowFilter;import HaoRan.ImageFilter.RaiseFrameFilter;import HaoRan.ImageFilter.RectMatrixFilter;import HaoRan.ImageFilter.ReflectionFilter;import HaoRan.ImageFilter.ReliefFilter;import HaoRan.ImageFilter.SaturationModifyFilter;import HaoRan.ImageFilter.SceneFilter;import HaoRan.ImageFilter.SepiaFilter;import HaoRan.ImageFilter.SharpFilter;import HaoRan.ImageFilter.ShiftFilter;import HaoRan.ImageFilter.SmashColorFilter;import HaoRan.ImageFilter.SoftGlowFilter;import HaoRan.ImageFilter.SupernovaFilter;import HaoRan.ImageFilter.ThreeDGridFilter;import HaoRan.ImageFilter.ThresholdFilter;import HaoRan.ImageFilter.TileReflectionFilter;import HaoRan.ImageFilter.TintFilter;import HaoRan.ImageFilter.VideoFilter;import HaoRan.ImageFilter.VignetteFilter;import HaoRan.ImageFilter.VintageFilter;import HaoRan.ImageFilter.WaterWaveFilter;import HaoRan.ImageFilter.XRadiationFilter;import HaoRan.ImageFilter.YCBCrLinearFilter;import HaoRan.ImageFilter.ZoomBlurFilter;import HaoRan.ImageFilter.Distort.BulgeFilter;import HaoRan.ImageFilter.Distort.RippleFilter;import HaoRan.ImageFilter.Distort.TwistFilter;import HaoRan.ImageFilter.Distort.WaveFilter;import HaoRan.ImageFilter.Textures.CloudsTexture;import HaoRan.ImageFilter.Textures.LabyrinthTexture;import HaoRan.ImageFilter.Textures.MarbleTexture;import HaoRan.ImageFilter.Textures.TextileTexture;import HaoRan.ImageFilter.Textures.TexturerFilter;import HaoRan.ImageFilter.Textures.WoodTexture;import HaoRan.ImageFilter.dialog.LoadingDialog;import android.annotation.SuppressLint;import android.app.Activity;import android.content.Context;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Color;import android.os.AsyncTask;import android.os.Bundle;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.View.OnClickListener;import android.widget.AdapterView;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.Gallery;import android.widget.ImageView;import android.widget.Toast;@SuppressLint("NewApi")public class Fragment2 extends Fragment{	private View parentView;	private ImageView mIvf2a1;	private Gallery gallery;	private Button mBtf2a2;	@Override	@Nullable	public View onCreateView(LayoutInflater inflater,			@Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {		parentView = inflater.inflate(R.layout.fragment2, container, false);		mIvf2a1 =(ImageView)	parentView.findViewById(R.id.mIvf2a1);		mBtf2a2 =(Button)	parentView.findViewById(R.id.mBtf2a2);		mBtf2a2.setOnClickListener(listener);		Bitmap bitmap = BitmapFactory.decodeResource(getActivity().getResources(), R.drawable.aa8);		mIvf2a1.setImageBitmap(bitmap);		 gallery = (Gallery) parentView.findViewById(R.id.galleryFilter);		 		LoadImageFilter();				return parentView;	}		OnClickListener listener =new OnClickListener() {				@Override		public void onClick(View v) {			switch (v.getId()) {			case R.id.mBtf2a2:				SaveBitmap(resultBitMap);				break;			default:				break;			}		}	};		/**	 * 加载图片filter	 */	private void LoadImageFilter() {		final ImageFilterAdapter filterAdapter = new ImageFilterAdapter(getActivity());		//AseoZdpAseo.initTimer(this);		gallery.setAdapter(new ImageFilterAdapter(getActivity()));		gallery.setOnItemClickListener(new AdapterView.OnItemClickListener() {			public void onItemClick(AdapterView<?> arg0, View arg1, int position, long id) {				IImageFilter filter = (IImageFilter) filterAdapter.getItem(position);				new processImageTask(getActivity(), filter).execute();			}		});	}	private Bitmap resultBitMap;	public class processImageTask extends AsyncTask<Void, Void, Bitmap> {		private IImageFilter filter;        private Activity activity = null;		private LoadingDialog dialog;		public processImageTask(Activity activity, IImageFilter imageFilter) {			this.filter = imageFilter;			this.activity = activity;		}		@Override		protected void onPreExecute() {			super.onPreExecute();			dialog = new LoadingDialog(getActivity(), "正在渲染中...");			dialog.show();		}		public Bitmap doInBackground(Void... params) {			Image img = null;			try	    	{				Bitmap bitmap = BitmapFactory.decodeResource(activity.getResources(), R.drawable.aa8);				img = new Image(bitmap);				if (filter != null) {					img = filter.process(img);					img.copyPixelsFromBuffer();				}				return img.getImage();	    	}			catch(Exception e){				if (img != null && img.destImage.isRecycled()) {					img.destImage.recycle();					img.destImage = null;					System.gc(); // 提醒系统及时回收				}			}			finally{				if (img != null && img.image.isRecycled()) {					img.image.recycle();					img.image = null;					System.gc(); // 提醒系统及时回收				}			}			return null;		}				@Override		protected void onPostExecute(Bitmap result) {			if(result != null){				super.onPostExecute(result);				resultBitMap = result;				mIvf2a1.setImageBitmap(result);				}			dialog.dismiss();		}	}	public void save(View view){		SaveBitmap(resultBitMap);	}		//保存到本地      public void SaveBitmap(Bitmap bmp) {      	  Date date = new Date();    	  SimpleDateFormat format = new SimpleDateFormat("hh-mm-ss");    	  String newDate = format.format(date);    	  String path = "/sdcard/namecard";/*    	  if (!destDir.exists()) {    	   destDir.mkdirs();    	  }*/    	  makeRootDirectory(path);    	  File f = new File(path+"/pic"+newDate+".png");    	  try {	    	   FileOutputStream out = new FileOutputStream(f);	    	   bmp.compress(Bitmap.CompressFormat.PNG, 90, out);	    	   out.flush();	    	   out.close();	    	   Toast.makeText(getActivity(), "保存成功", Toast.LENGTH_SHORT).show();    	  } catch (FileNotFoundException e) {    	       e.printStackTrace();    	       Toast.makeText(getActivity(), "保存失败1", Toast.LENGTH_SHORT).show();    	  } catch (IOException e) {   	       Toast.makeText(getActivity(), "保存失败2", Toast.LENGTH_SHORT).show();    	       e.printStackTrace();    	  }    }    public static void makeRootDirectory(String filePath) {        File file = null;        try {            file = new File(filePath);            if (!file.exists()) {                file.mkdir();            }        } catch (Exception e) {        }}		public class ImageFilterAdapter extends BaseAdapter {		private class FilterInfo {			public int filterID;			public IImageFilter filter;			public FilterInfo(int filterID, IImageFilter filter) {				this.filterID = filterID;				this.filter = filter;			}		}		private Context mContext;		private List<FilterInfo> filterArray = new ArrayList<FilterInfo>();		public ImageFilterAdapter(Context c) {}		public int getCount() {			return filterArray.size();		}		public Object getItem(int position) {			return position < filterArray.size() ? filterArray.get(position).filter					: null;		}		public long getItemId(int position) {			return position;		}		public View getView(int position, View convertView, ViewGroup parent) {			Bitmap bmImg = BitmapFactory					.decodeResource(mContext.getResources(),							filterArray.get(position).filterID);			int width = 200;// bmImg.getWidth();			int height = 200;// bmImg.getHeight();			bmImg.recycle();			ImageView imageview = new ImageView(mContext);			imageview.setImageResource(filterArray.get(position).filterID);			imageview.setLayoutParams(new Gallery.LayoutParams(width, height));			imageview.setScaleType(ImageView.ScaleType.FIT_CENTER);// 设置显示比例类型			return imageview;		}	};	}